{"version":3,"sources":["api/axios.js","api/index.js","api/task.js","pages/Task.js","index.js"],"names":["axios","defaults","baseURL","timeout","headers","transformRequest","data","qs","stringify","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","validateStatus","status","test","response","reponse","window","navigator","onLine","api","task","getTaskList","state","get","params","addTask","time","post","removeTask","id","_id","completeTask","TextArea","Input","confirm","Modal","NOWNEXT","moment","Date","getTime","Task","columns","width","title","dataIndex","key","render","text","parseInt","className","complete","timeArr","match","template","replace","val","group1","res","length","completeArr","color","style","marginTop","record","index","type","onClick","handleDelete","bind","handleFinish","visible","loading","tagList","selected","content","okType","onOk","a","console","log","code","message","success","cancel","queryData","msg","setState","list","submit","trim","warn","toDate","toLocaleString","result","changeType","ev","target","getAttribute","tagName","changeTagState","setItem","map","item","this","tag","dataSource","pagination","rowKey","maskClosable","onCancel","row","value","onInput","showTime","onChange","Component","ReactDOM","locale","zhCN","document","getElementById"],"mappings":"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","file":"static/js/main.bbdd7426.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs';\r\naxios.defaults.baseURL = 'http://127.0.0.1:8000';\r\naxios.defaults.timeout = 5000;\r\n// axios.defaults.withCredentials = true;\r\naxios.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\naxios.defaults.transformRequest = data => qs.stringify(data);\r\n\r\n// token机制\r\naxios.interceptors.request.use(config => {\r\n  let token = localStorage.getItem('token');\r\n  token && (config.headers.Authorization = token);\r\n  return config;\r\n}, error => {\r\n  Promise.reject(error)\r\n})\r\naxios.defaults.validateStatus = status => {\r\n  return /^(2|3)\\d{2}$/.test(status);\r\n}\r\naxios.interceptors.response.use(reponse => {\r\n  return reponse.data;\r\n}, error => {\r\n  if (error.response) {\r\n    switch (error.response.status) {\r\n      case 401:\r\n        break;\r\n      case 403:\r\n        break;\r\n      case 404:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  } else {\r\n    if (!window.navigator.onLine) {\r\n      return;\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n})\r\n\r\nexport default axios;","import taskAPI from './task';\r\n// 根据模块名来调用接口 命名空间\r\n// 数据请求也按照模块化处理\r\nconst api = {\r\n  task:taskAPI\r\n}\r\n\r\n\r\n\r\nexport default api;","// task模块的接口\r\nimport axios from './axios';\r\n\r\nconst taskAPI = {\r\n  getTaskList (state=0) {\r\n    return axios.get('/getTaskList', {\r\n      params: {\r\n        state\r\n      }\r\n    })\r\n  },\r\n  addTask (task,time) {\r\n    return axios.post('/addTask', {\r\n      task,\r\n      time\r\n    })\r\n  },\r\n  removeTask (id) {\r\n    return axios.get('/removeTask', {\r\n      params: {\r\n        _id:id\r\n      }\r\n    })\r\n  },\r\n  completeTask (id) {\r\n    return axios.get('/completeTask', {\r\n      params: {\r\n        _id:id\r\n      }\r\n    })\r\n  },\r\n\r\n};\r\n\r\nexport default taskAPI;","import React, { Component } from 'react'\r\nimport './Task.less'\r\nimport api from '../api/index'\r\nimport moment from 'moment';\r\nimport { Button, Tag, Table, Modal, Input, DatePicker,message} from 'antd';\r\nconst { TextArea } = Input;\r\nconst { confirm} = Modal;\r\n// 包含的东西多就用类组件\r\n\r\n// 今天后一天\r\nconst NOWNEXT = moment(new Date(new Date().getTime() + (24 * 60 * 60 * 1000)));\r\nexport default class Task extends Component {\r\n  state = {\r\n    columns: [\r\n      {\r\n        width:'10%',\r\n        title: '编号',\r\n        dataIndex: '_id',\r\n        key: ''\r\n      },\r\n      {\r\n        width:'30%',\r\n        title: '任务描述',\r\n        render: text => {\r\n          let { state, task } = text;\r\n          return <>\r\n            {\r\n              parseInt(state) === 2 ? <div className=\"finish\">{task}</div> : <div>{ task }</div>\r\n            }\r\n          </>\r\n        }\r\n      },\r\n      {\r\n        width:'20%',\r\n        title: '时间',\r\n        render: text => {\r\n          let { time, complete, state } = text;\r\n          // 根据状态选择显示哪个时间\r\n          // if (state === 2) {\r\n          //   // 完成\r\n          //   time = complete;\r\n          // }\r\n          // 2021-08-18 18:00:00\r\n          // ['2021','08','18' ...]\r\n          let timeArr = time.match(/\\d+/g);\r\n          // 1,2,3,4 作为索引\r\n          let template = '{1}-{2} {3}:{4}'\r\n          time = template.replace(/\\{(\\d+)\\}/g, (val, group1) => {\r\n            let res = timeArr[group1] || '0';\r\n            return res.length < 2 ? '0' + res : res;\r\n          })\r\n        \r\n          if (state === 2) {\r\n            let completeArr = complete.match(/\\d+/g);\r\n            // 1,2,3,4 作为索引\r\n            complete = template.replace(/\\{(\\d+)\\}/g, (val, group1) => {\r\n              let res = completeArr[group1] || '0';\r\n              return res.length < 2 ? '0' + res : res;\r\n            })\r\n          }\r\n\r\n          return <>\r\n            <p>{ time} <Tag color=\"volcano\">预期</Tag></p>\r\n            { state === 2 ? <p style={{marginTop:5}}>{ complete} <Tag color=\"lime\">最终</Tag></p> : null}\r\n\r\n          </>\r\n        }\r\n      },\r\n      {\r\n        width:'15%',\r\n        title: '状态',\r\n        dataIndex:'state',\r\n        render: (text, record, index) => {\r\n          // 如果没有dataIndex text === record\r\n          // text 当前行的值 record 当前行数据 index 行索引\r\n          return text === 1 ? <Tag color=\"#f50\">未完成</Tag> :<Tag color=\"#87d068\">已完成</Tag>\r\n        }\r\n      },\r\n      {\r\n        width:'18%',\r\n        title: '操作',\r\n        render: text => {\r\n          let { state } = text;\r\n          return <>\r\n            <Button type=\"link\" onClick={this.handleDelete.bind(this,text)}>删除</Button>\r\n            { state === 1 ? <Button type=\"link\" onClick={this.handleFinish.bind(this,text)}>完成</Button> : null}\r\n          </>\r\n        }\r\n      },\r\n    ],\r\n    data: [\r\n      {\r\n        id: 1,\r\n        task: '夫君子之行，静以修身，俭以养德，非宁静无以致远，非淡泊无以明志',\r\n        state: 1, //未完成\r\n        time: '2021-8-18 18:00:00',\r\n        complete:'2021-8-15 18:00:00'\r\n      }],\r\n    // 模态框显示/隐藏\r\n    visible: false,\r\n    // table加载等待状态\r\n    loading: false,\r\n    // 控制输入内容\r\n    task: '',\r\n    time: NOWNEXT,\r\n    // 控制页卡\r\n    tagList: [{\r\n      state: 0,\r\n      text: '全部',\r\n      selected:true\r\n    },{\r\n      state: 1,\r\n      text: '未完成',\r\n      selected:false\r\n    },{\r\n      state: 2,\r\n      text: '已完成',\r\n      selected:false\r\n    }]\r\n    \r\n    \r\n  }\r\n  render () {\r\n    let { columns,visible,data,loading,task,time,tagList} = this.state;\r\n    return <section className=\"taskBox\">\r\n      <header className=\"headerBox\">\r\n        <h2>任务列表</h2>\r\n        <Button type=\"primary\" onClick={ev=>this.setState({visible:true})}>新增</Button>\r\n      </header>\r\n      <nav className=\"navBox\" onClick={this.changeType}>\r\n        {\r\n          tagList.map(tag => (\r\n            <Tag key={ tag.state } color={ tag.selected ? '#108ee9' : ''} state={ tag.state }>{tag.text}</Tag>\r\n          ))\r\n        }\r\n      </nav>\r\n      <Table columns={columns} dataSource={data} loading={loading} pagination={false} rowKey=\"_id\"></Table>\r\n      {/* 新增对话框 */}\r\n      <Modal title=\"新增任务\"\r\n        className=\"modalBox\"\r\n        maskClosable={false}\r\n        visible={visible}\r\n        onOk={this.submit}\r\n        onCancel={this.cancel}>\r\n          <p>任务描述</p>\r\n        <TextArea row={4} value={task} onInput={ev => {this.setState({task:ev.target.value})}}></TextArea>\r\n          <p>预期完成时间</p>\r\n          <DatePicker showTime onChange={ ev =>{this.setState({time:ev})}} value={time}></DatePicker>\r\n      </Modal>\r\n    </section>\r\n  }\r\n  handleDelete = text => {\r\n    let { _id } = text;\r\n    confirm({\r\n      title: '这是一个危险操作',\r\n      content: `确定要删除${_id}的信息吗？`,\r\n      okType: 'danger',\r\n      onOk: async () => {\r\n        let res = await api.task.removeTask(_id);\r\n        console.log(res)\r\n        if (parseInt(res.code) === 0) {\r\n          message.success('删除成功');\r\n          this.cancel();\r\n          // 重新获取指定状态下的数据\r\n          let state = parseInt(localStorage.getItem('state') || 0);\r\n          if (state !== 2) {\r\n            // 不是已完成才拉取\r\n            this.queryData(state);\r\n          }\r\n          return;\r\n        }\r\n        message.error('删除失败')\r\n      }\r\n    })\r\n  }\r\n  handleFinish = text => {\r\n    let { _id,task} = text;\r\n    console.log(text)\r\n    confirm({\r\n      title: '提示',\r\n      content: `你已经完成了${task}任务吗？`,\r\n      okType: 'warning',\r\n      onOk: async () => {\r\n        let res = await api.task.completeTask(_id);\r\n        if (parseInt(res.code) === 0) {\r\n          message.success(res.msg);\r\n          this.cancel();\r\n          // 重新获取指定状态下的数据\r\n          let state = parseInt(localStorage.getItem('state') || 0);\r\n          if (state !== 2) {\r\n            // 不是已完成才拉取\r\n            this.queryData(state);\r\n          }\r\n          return;\r\n        }\r\n        message.error('删除失败')\r\n      }\r\n    })\r\n\r\n  }\r\n  queryData = async state => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    let res = await api.task.getTaskList(state)\r\n    console.log(res.list)\r\n    if (parseInt(res.code) === 0) {\r\n      this.setState({\r\n        data: res.list,\r\n        loading:false\r\n      })\r\n      return;\r\n    }\r\n    // 失败\r\n    message.error('数据获取失败,稍后再试')\r\n    this.setState({\r\n      loading:false\r\n    })\r\n  }\r\n  componentWillMount () {\r\n    console.log(localStorage.getItem('state'));\r\n    let state = parseInt(localStorage.getItem('state')) || 0;\r\n    if (state !== 0) {\r\n      this.changeTagState(state);\r\n    }\r\n    this.queryData(state)\r\n  }\r\n  // 新增任务\r\n  submit = async () => {\r\n    let { task, time } = this.state;\r\n    if (task.trim().length === 0) {\r\n      message.warn('任务不能为空')\r\n    }\r\n    if (!time) {\r\n      message.warn('完成时间不能为空')\r\n    }\r\n\r\n    time = time.toDate();\r\n    time = time.toLocaleString();\r\n    let result = await api.task.addTask(task, time);\r\n    let { code,msg} = result;\r\n    if (parseInt(code) === 0) {\r\n      message.success(msg)\r\n      this.cancel();\r\n      // 重新获取指定状态下的数据\r\n      let state = parseInt(localStorage.getItem('state') || 0);\r\n      if (state !== 2) {\r\n        // 不是已完成才拉取\r\n        this.queryData(state);\r\n      }\r\n      \r\n      return;\r\n    }\r\n    message.error('新增失败!')\r\n  }\r\n  cancel = () => {\r\n    this.setState({\r\n      visible: false,\r\n      time: NOWNEXT,\r\n      task:''\r\n      \r\n    })\r\n  }\r\n  // 切换页卡\r\n  changeType = ev => {\r\n    let target = ev.target;\r\n    let state = target.getAttribute('state');\r\n    if (target.tagName !== 'SPAN') return;\r\n    state = parseInt(state);\r\n    this.changeTagState(state)\r\n    // 获取数据\r\n    this.queryData(state)\r\n    // 把本地选中往本地存储一份\r\n    localStorage.setItem('state',state)\r\n  }\r\n  changeTagState = (state) => {\r\n    let tagList = this.state.tagList;\r\n    tagList = tagList.map(item => {\r\n      item.selected = item.state === state ? true : false;\r\n      return item;\r\n    })\r\n    this.setState({\r\n      tagList\r\n    })\r\n  }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { ConfigProvider } from 'antd';\r\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\r\nimport zhCN from 'antd/lib/locale/zh_CN';\r\n// import 'antd/dist/antd.css';\r\n// 可以修改主题色\r\nimport 'antd/dist/antd.less'\r\n\r\n// 导入组件\r\nimport Task from './pages/Task'\r\n\r\n// 导入公共样式\r\nimport './assets/reset.min.css';\r\nimport './assets/common.less'\r\n\r\nReactDOM.render(<ConfigProvider locale={zhCN}>\r\n  <Task></Task>\r\n</ConfigProvider>, document.getElementById('root'))"],"sourceRoot":""}